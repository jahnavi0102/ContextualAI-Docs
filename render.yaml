# render.yaml - This file must be at the root of your GitHub repository

services:
  # PostgreSQL Database
  - type: pserv # Changed from 'postgres' to 'pserv'
    name: document_management_db # Updated name
    env: postgres # Added env
    plan: starter # Optional: Uncomment and specify if you want a particular plan
    # region: oregon # Optional: Uncomment and specify if you want a particular region

  # Redis Cache for Channels and RQ
  - type: pserv # Changed from 'redis' to 'pserv'
    name: document_management_redis # Updated name
    env: redis # Added env
    ipAllowList: [] # Allow all IPs for now (or specify specific service IPs later)
    plan: starter # Optional: Uncomment and specify if you want a particular plan

  # Django Web Service (Handles HTTP and WebSockets)
  - type: web
    name: backend
    env: python
    # IMPORTANT: Specify the root directory if your Django project is in a subdirectory (e.g., 'backend/')
    
    buildCommand: "cd backend && pip install -r requirements.txt && python manage.py collectstatic --noinput"
    startCommand: "cd backend && daphne document_management.asgi:application -b 0.0.0.0 -p $PORT"
    
    healthCheckPath: "/admin/login/" # Or any other path that returns 200 OK
    plan: starter # Or higher for production
    numInstances: 1 # Start with 1, scale up as needed
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: document_management_db # Updated name to match above
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: pserv # Updated type to match above
          name: document_management_redis # Updated name to match above
          property: connectionString
      - key: SECRET_KEY
        generateValue: true # Render will generate a strong secret key for you
      - key: PINECONE_API_KEY
        sync: false # Set manually in Render dashboard or use a Render Secret Group
      - key: PINECONE_ENVIRONMENT
        sync: false # Set manually
      - key: PINECONE_INDEX_NAME
        value: rag-document-index # Or your index name
      - key: GEMINI_API_KEY
        sync: false # Set manually
    # Post-deploy command to run migrations
    preDeployCommand: "cd backend && python manage.py migrate"

  # Django RQ Worker for background tasks
  - type: worker
    name: background_document_management_task
    env: python
    # IMPORTANT: Specify the root directory if your Django project is in a subdirectory (e.g., 'backend/')
  
    buildCommand: "cd backend && pip install -r requirements.txt"
    startCommand: "cd backend && python manage.py rqworker default"
    plan: starter # Or higher
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: document_management_db # Updated name to match above
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: pserv # Updated type to match above
          name: document_management_redis # Updated name to match above
          property: connectionString
      - key: SECRET_KEY
        fromService: # Reuse the SECRET_KEY generated by the web service
          type: web
          name: backend
          property: SECRET_KEY
      - key: PINECONE_API_KEY
        sync: false # Set manually
      - key: PINECONE_ENVIRONMENT
        sync: false # Set manually
      - key: PINECONE_INDEX_NAME
        value: rag-document-index # Or your index name
      - key: GEMINI_API_KEY
        sync: false # Set manually
