# render.yaml
services:
  # PostgreSQL Database
  - type: postgres
    name: document_management # This name will be used to generate DATABASE_URL env var

  # Redis Cache for Channels and RQ
  - type: redis
    name: document_management # This name will be used to generate REDIS_URL env var
    ipAllowlist: [] # Allow all IPs for now (or specify specific service IPs later)

  # Django Web Service (Handles HTTP and WebSockets)
  - type: web
    name: backend
    env: python
    buildCommand: "pip install -r requirements.txt && python manage.py collectstatic --noinput"
    startCommand: "daphne document_management.asgi:application -b 0.0.0.0 -p $PORT"
    # Or for Gunicorn+Uvicorn: "gunicorn document_management.asgi:application -k uvicorn.workers.UvicornWorker -b 0.0.0.0 -p $PORT"
    healthCheckPath: "/admin/login/" # Or any other path that returns 200 OK
    plan: starter # Or higher for production
    numInstances: 1 # Start with 1, scale up as needed
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: document_management
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: document_management
          property: connectionString
      - key: SECRET_KEY
        generateValue: true # Render will generate a strong secret key for you
      - key: PINECONE_API_KEY
        sync: false # Set manually in Render dashboard or use a Render Secret Group
      - key: PINECONE_ENVIRONMENT
        sync: false # Set manually
      - key: PINECONE_INDEX_NAME
        value: rag-document-index # Or your index name
      - key: GEMINI_API_KEY
        sync: false # Set manually
    # Post-deploy command to run migrations
    preDeployCommand: "python manage.py migrate"

  # Django RQ Worker for background tasks
  - type: worker
    name: background_document_management_task
    env: python
    buildCommand: "pip install -r requirements.txt"
    startCommand: "python manage.py rqworker default"
    plan: starter # Or higher
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: document_management
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: document_management
          property: connectionString
      - key: SECRET_KEY
        fromService: # Reuse the SECRET_KEY generated by the web service
          type: web
          name: backend
          property: SECRET_KEY
      - key: PINECONE_API_KEY
        sync: false # Set manually
      - key: PINECONE_ENVIRONMENT
        sync: false # Set manually
      - key: PINECONE_INDEX_NAME
        value: rag-document-index # Or your index name
      - key: GEMINI_API_KEY
        sync: false # Set manually