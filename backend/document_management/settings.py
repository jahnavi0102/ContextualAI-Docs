# """
# Django settings for document_management project.

# Generated by 'django-admin startproject' using Django 5.2.5.

# For more information on this file, see
# https://docs.djangoproject.com/en/5.2/topics/settings/

# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/5.2/ref/settings/
# """

# from pathlib import Path

# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
# import os

# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# # SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-n89fjey85v)02kn11a5vwo^ewq=&(bsno)(@60!cr)w%-@x0%j'

# # SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

# ALLOWED_HOSTS = []

# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:5173", 
#     "http://127.0.0.1:5173",  
# ]


# # Application definition

# INSTALLED_APPS = [
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
#     'corsheaders',
#     'channels',
#     'django_rq',
#     'rest_framework',
#     'rest_framework_simplejwt',
#     'users',
#     'chat',
#     'documents',
#     'analytics',
# ]

# MIDDLEWARE = [
#     'django.middleware.security.SecurityMiddleware',
#     'corsheaders.middleware.CorsMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
# ]

# # CHANNEL_LAYERS = {
# #     'default': {
# #         'BACKEND': 'channels_redis.core.RedisChannelLayer',
# #         'CONFIG': {
# #             'hosts': [('127.0.0.1', 6379)],
# #         },
# #     },
# # }

# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.pubsub.RedisPubSubChannelLayer",
#         "CONFIG": {
#             "hosts": [os.environ.get('REDIS_URL', 'redis://localhost:6379/0')],
#         },
#     },
# }

# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ),
#     'DEFAULT_PERMISSION_CLASSES': (
#         'rest_framework.permissions.IsAuthenticated',
#     )
# }
# from datetime import timedelta

# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': timedelta(hours=5),
#     'TOKEN_OBTAIN_PAIR_SERIALIZER': 'users.serializers.MyTokenObtainPairSerializer',
# }

# ASGI_APPLICATION = 'document_management.asgi.application'

# ROOT_URLCONF = 'document_management.urls'



# PINECONE_API_KEY = os.environ.get('PINECONE_API_KEY')
# PINECONE_ENVIRONMENT = os.environ.get('PINECONE_ENVIRONMENT')
# PINECONE_INDEX_NAME = os.environ.get('PINECONE_INDEX_NAME')

# GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
# GEMINI_API_BASE_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent'
# GEMINI_MODEL_NAME = "gemini-2.0-flash"

# MEDIA_URL = '/media/'
# MEDIA_ROOT = BASE_DIR / 'media'

# # Django-RQ configuration
# # RQ_QUEUES = {
# #     'default': {
# #         'HOST': 'localhost',
# #         'PORT': 6379,
# #         'DB': 0,
# #         'DEFAULT_TIMEOUT': 360,
# #         # 'WORKER_CLASS': 'rq_gevent_worker.GeventWorker'
# #         'WORKER_CLASS': 'rq.worker.AsyncioWorker' 
# #     }
# # }

# RQ_QUEUES = {
#     'default': {
#         'HOST': os.environ.get('REDIS_HOST', 'localhost'), # Render provides REDIS_HOST
#         'PORT': os.environ.get('REDIS_PORT', 6379),
#         'DB': 0,
#         'PASSWORD': os.environ.get('REDIS_PASSWORD', None),
#         'DEFAULT_TIMEOUT': 360,
#     }
# }
# # Add RQ_FORK for Windows compatibility during local dev, keep for Render (Linux) too
# RQ_FORK = False


# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]

# WSGI_APPLICATION = 'document_management.wsgi.application'


# # Database
# # https://docs.djangoproject.com/en/5.2/ref/settings/#databases


# # DATABASES = {
# #     'default': {
# #         'ENGINE': 'django.db.backends.postgresql',
# #         'NAME': 'document_management',         
# #         'USER': 'postgres',        
# #         'PASSWORD': 'postgres',    
# #         'HOST': 'localhost',
# #         'PORT': '5432',
# #     }
# # }

# import os
# import dj_database_url

# DATABASES = {
#     'default': dj_database_url.config(
#         default=os.environ.get('DATABASE_URL'),
#         conn_max_age=600
#     )
# }

# # import os

# # PINECONE_API_KEY = os.environ.get('PINECONE_API_KEY')
# # PINECONE_ENVIRONMENT = os.environ.get('PINECONE_ENVIRONMENT')
# # PINECONE_INDEX_NAME = 'my-document-index'


# # Password validation
# # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]


# # Internationalization
# # https://docs.djangoproject.com/en/5.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'

# USE_I18N = True

# USE_TZ = True


# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/5.2/howto/static-files/

# # STATIC_URL = 'static/'

# STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# # Default primary key field type
# # https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# AUTH_USER_MODEL = 'users.User'

"""
Django settings for document_management project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-n89fjey85v)02kn11a5vwo^ewq=&(bsno)(@60!cr)w%-@x0%j')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# Update ALLOWED_HOSTS for production
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '.onrender.com',  # Allow all Render subdomains
]

# Add your deployed URL when you get it, e.g.:
# ALLOWED_HOSTS = ['your-app-name.onrender.com', 'localhost', '127.0.0.1']

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173", 
    "http://127.0.0.1:5173",
    # Add your frontend URL when deployed, e.g.:
    # "https://your-frontend.vercel.app",
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'channels',
    'rest_framework',
    'rest_framework_simplejwt',
    'users',
    'chat',
    'documents',
    'analytics',
]

# Conditionally add django_rq if Redis is available
REDIS_URL = os.environ.get('REDIS_URL')
if REDIS_URL and 'redis://' in REDIS_URL:
    INSTALLED_APPS.append('django_rq')

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Channel Layers configuration
REDIS_URL = os.environ.get('REDIS_URL')
if REDIS_URL and 'redis://' in REDIS_URL:
    # Use Redis if available
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.pubsub.RedisPubSubChannelLayer",
            "CONFIG": {
                "hosts": [REDIS_URL],
            },
        },
    }
else:
    # Fallback to in-memory channel layer (for development/free tier)
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer"
        },
    }

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=5),
    'TOKEN_OBTAIN_PAIR_SERIALIZER': 'users.serializers.MyTokenObtainPairSerializer',
}

ASGI_APPLICATION = 'document_management.asgi.application'
ROOT_URLCONF = 'document_management.urls'

# External API Configuration
PINECONE_API_KEY = os.environ.get('PINECONE_API_KEY')
PINECONE_ENVIRONMENT = os.environ.get('PINECONE_ENVIRONMENT')
PINECONE_INDEX_NAME = os.environ.get('PINECONE_INDEX_NAME')

GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
GEMINI_API_BASE_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent'
GEMINI_MODEL_NAME = "gemini-2.0-flash"

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Django-RQ configuration (only if Redis is available)
if REDIS_URL and 'redis://' in REDIS_URL:
    # Parse Redis URL for RQ configuration
    from urllib.parse import urlparse
    redis_url = urlparse(REDIS_URL)
    
    RQ_QUEUES = {
        'default': {
            'HOST': redis_url.hostname,
            'PORT': redis_url.port or 6379,
            'DB': 0,
            'PASSWORD': redis_url.password,
            'DEFAULT_TIMEOUT': 360,
        }
    }
    RQ_FORK = False

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'document_management.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL'),
        conn_max_age=600
    )
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.User'

# Security settings for production
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = 86400
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True